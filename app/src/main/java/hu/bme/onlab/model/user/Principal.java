/**
 * ServiceFinder API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package hu.bme.onlab.model.user;

import java.util.*;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;


@ApiModel(description = "")
public class Principal  {
  
  @SerializedName("accountNonExpired")
  private Boolean accountNonExpired = null;
  @SerializedName("accountNonLocked")
  private Boolean accountNonLocked = null;
  @SerializedName("authorities")
  private List<Authority> authorities = null;
  @SerializedName("credentialsNonExpired")
  private Boolean credentialsNonExpired = null;
  @SerializedName("enabled")
  private Boolean enabled = null;
  @SerializedName("password")
  private String password = null;
  @SerializedName("username")
  private String username = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public Boolean getAccountNonExpired() {
    return accountNonExpired;
  }
  public void setAccountNonExpired(Boolean accountNonExpired) {
    this.accountNonExpired = accountNonExpired;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Boolean getAccountNonLocked() {
    return accountNonLocked;
  }
  public void setAccountNonLocked(Boolean accountNonLocked) {
    this.accountNonLocked = accountNonLocked;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public List<Authority> getAuthorities() {
    return authorities;
  }
  public void setAuthorities(List<Authority> authorities) {
    this.authorities = authorities;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Boolean getCredentialsNonExpired() {
    return credentialsNonExpired;
  }
  public void setCredentialsNonExpired(Boolean credentialsNonExpired) {
    this.credentialsNonExpired = credentialsNonExpired;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Boolean getEnabled() {
    return enabled;
  }
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getPassword() {
    return password;
  }
  public void setPassword(String password) {
    this.password = password;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getUsername() {
    return username;
  }
  public void setUsername(String username) {
    this.username = username;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Principal principal = (Principal) o;
    return (accountNonExpired == null ? principal.accountNonExpired == null : accountNonExpired.equals(principal.accountNonExpired)) &&
        (accountNonLocked == null ? principal.accountNonLocked == null : accountNonLocked.equals(principal.accountNonLocked)) &&
        (authorities == null ? principal.authorities == null : authorities.equals(principal.authorities)) &&
        (credentialsNonExpired == null ? principal.credentialsNonExpired == null : credentialsNonExpired.equals(principal.credentialsNonExpired)) &&
        (enabled == null ? principal.enabled == null : enabled.equals(principal.enabled)) &&
        (password == null ? principal.password == null : password.equals(principal.password)) &&
        (username == null ? principal.username == null : username.equals(principal.username));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (accountNonExpired == null ? 0: accountNonExpired.hashCode());
    result = 31 * result + (accountNonLocked == null ? 0: accountNonLocked.hashCode());
    result = 31 * result + (authorities == null ? 0: authorities.hashCode());
    result = 31 * result + (credentialsNonExpired == null ? 0: credentialsNonExpired.hashCode());
    result = 31 * result + (enabled == null ? 0: enabled.hashCode());
    result = 31 * result + (password == null ? 0: password.hashCode());
    result = 31 * result + (username == null ? 0: username.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Principal {\n");
    
    sb.append("  accountNonExpired: ").append(accountNonExpired).append("\n");
    sb.append("  accountNonLocked: ").append(accountNonLocked).append("\n");
    sb.append("  authorities: ").append(authorities).append("\n");
    sb.append("  credentialsNonExpired: ").append(credentialsNonExpired).append("\n");
    sb.append("  enabled: ").append(enabled).append("\n");
    sb.append("  password: ").append(password).append("\n");
    sb.append("  username: ").append(username).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
